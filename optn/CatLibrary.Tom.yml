items:
- uid: CatLibrary.Tom
  id: Tom
  parent: CatLibrary
  children:
  - CatLibrary.Tom.TomMethod(CatLibrary.Complex{CatLibrary.TomFromBaseClass,CatLibrary.TomFromBaseClass},System.Tuple{System.String,CatLibrary.Tom})
  langs:
  - csharp
  - vb
  name: Tom
  fullName: CatLibrary.Tom
  type: Class
  source:
    path: D:\GitHub\docfx\docfx_project\src\SampleClass1\CatLibrary\Class1.cs
    startLine: 281
  assemblies:
  - CatLibrary
  namespace: CatLibrary
  summary: "\r\nTom class is only inherit from Object. Not any member inside itself.\r\n"
  example: []
  syntax:
    content: public class Tom
    content.vb: Public Class Tom
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: CatLibrary.Tom.TomMethod(CatLibrary.Complex{CatLibrary.TomFromBaseClass,CatLibrary.TomFromBaseClass},System.Tuple{System.String,CatLibrary.Tom})
  id: TomMethod(CatLibrary.Complex{CatLibrary.TomFromBaseClass,CatLibrary.TomFromBaseClass},System.Tuple{System.String,CatLibrary.Tom})
  parent: CatLibrary.Tom
  langs:
  - csharp
  - vb
  name: TomMethod(Complex<TomFromBaseClass, TomFromBaseClass>, Tuple<String, Tom>)
  fullName: CatLibrary.Tom.TomMethod(CatLibrary.Complex<CatLibrary.TomFromBaseClass, CatLibrary.TomFromBaseClass>, System.Tuple<System.String, CatLibrary.Tom>)
  type: Method
  source:
    path: D:\GitHub\docfx\docfx_project\src\SampleClass1\CatLibrary\Class1.cs
    startLine: 292
  assemblies:
  - CatLibrary
  namespace: CatLibrary
  summary: "\r\nThis is a Tom Method with complex type as return\r\n"
  example: []
  syntax:
    content: public Complex<string, TomFromBaseClass> TomMethod(Complex<TomFromBaseClass, TomFromBaseClass> a, Tuple<string, Tom> b)
    content.vb: Public Function TomMethod(a As Complex(Of TomFromBaseClass, TomFromBaseClass), b As Tuple(Of String, Tom)) As Complex(Of String, TomFromBaseClass)
    parameters:
    - id: a
      type: CatLibrary.Complex{CatLibrary.TomFromBaseClass,CatLibrary.TomFromBaseClass}
      description: A complex input
    - id: b
      type: System.Tuple{System.String,CatLibrary.Tom}
      description: Another complex input
    return:
      type: CatLibrary.Complex{System.String,CatLibrary.TomFromBaseClass}
      description: Complex @CatLibrary.TomFromBaseClass
  exceptions:
  - type: System.NotImplementedException
    description: This is not implemented
  - type: System.ArgumentException
    description: This is the exception to be thrown when implemented
  - type: CatLibrary.CatException`1
    description: This is the exception in current documentation
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: CatLibrary.Tom.TomMethod(CatLibrary.Complex(Of CatLibrary.TomFromBaseClass, CatLibrary.TomFromBaseClass), System.Tuple(Of System.String, CatLibrary.Tom))
  name.vb: TomMethod(Complex(Of TomFromBaseClass, TomFromBaseClass), Tuple(Of String, Tom))
references:
- uid: CatLibrary
  isExternal: false
  name: CatLibrary
  fullName: CatLibrary
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.NotImplementedException
- uid: System.ArgumentException
- uid: CatLibrary.CatException`1
  isExternal: false
  name: CatException<T>
  fullName: CatLibrary.CatException<T>
  fullname.vb: CatLibrary.CatException(Of T)
  name.vb: CatException(Of T)
  spec.csharp:
  - uid: CatLibrary.CatException`1
    name: CatException
    fullName: CatLibrary.CatException
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: CatLibrary.CatException`1
    name: CatException
    fullName: CatLibrary.CatException
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: CatLibrary.Complex{CatLibrary.TomFromBaseClass,CatLibrary.TomFromBaseClass}
  parent: CatLibrary
  definition: CatLibrary.Complex`2
  name: Complex<TomFromBaseClass, TomFromBaseClass>
  fullName: CatLibrary.Complex<CatLibrary.TomFromBaseClass, CatLibrary.TomFromBaseClass>
  fullname.vb: CatLibrary.Complex(Of CatLibrary.TomFromBaseClass, CatLibrary.TomFromBaseClass)
  name.vb: Complex(Of TomFromBaseClass, TomFromBaseClass)
  spec.csharp:
  - uid: CatLibrary.Complex`2
    name: Complex
    fullName: CatLibrary.Complex
  - name: <
    fullName: <
  - uid: CatLibrary.TomFromBaseClass
    name: TomFromBaseClass
    fullName: CatLibrary.TomFromBaseClass
  - name: ', '
    fullName: ', '
  - uid: CatLibrary.TomFromBaseClass
    name: TomFromBaseClass
    fullName: CatLibrary.TomFromBaseClass
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: CatLibrary.Complex`2
    name: Complex
    fullName: CatLibrary.Complex
  - name: '(Of '
    fullName: '(Of '
  - uid: CatLibrary.TomFromBaseClass
    name: TomFromBaseClass
    fullName: CatLibrary.TomFromBaseClass
  - name: ', '
    fullName: ', '
  - uid: CatLibrary.TomFromBaseClass
    name: TomFromBaseClass
    fullName: CatLibrary.TomFromBaseClass
  - name: )
    fullName: )
- uid: System.Tuple{System.String,CatLibrary.Tom}
  parent: System
  definition: System.Tuple`2
  name: Tuple<String, Tom>
  fullName: System.Tuple<System.String, CatLibrary.Tom>
  fullname.vb: System.Tuple(Of System.String, CatLibrary.Tom)
  name.vb: Tuple(Of String, Tom)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: CatLibrary.Tom
    name: Tom
    fullName: CatLibrary.Tom
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: CatLibrary.Tom
    name: Tom
    fullName: CatLibrary.Tom
  - name: )
    fullName: )
- uid: CatLibrary.Complex{System.String,CatLibrary.TomFromBaseClass}
  parent: CatLibrary
  definition: CatLibrary.Complex`2
  name: Complex<String, TomFromBaseClass>
  fullName: CatLibrary.Complex<System.String, CatLibrary.TomFromBaseClass>
  fullname.vb: CatLibrary.Complex(Of System.String, CatLibrary.TomFromBaseClass)
  name.vb: Complex(Of String, TomFromBaseClass)
  spec.csharp:
  - uid: CatLibrary.Complex`2
    name: Complex
    fullName: CatLibrary.Complex
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: CatLibrary.TomFromBaseClass
    name: TomFromBaseClass
    fullName: CatLibrary.TomFromBaseClass
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: CatLibrary.Complex`2
    name: Complex
    fullName: CatLibrary.Complex
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: CatLibrary.TomFromBaseClass
    name: TomFromBaseClass
    fullName: CatLibrary.TomFromBaseClass
  - name: )
    fullName: )
- uid: CatLibrary.Complex`2
  parent: CatLibrary
  isExternal: false
  name: Complex<T, J>
  fullName: CatLibrary.Complex<T, J>
  fullname.vb: CatLibrary.Complex(Of T, J)
  name.vb: Complex(Of T, J)
  spec.csharp:
  - uid: CatLibrary.Complex`2
    name: Complex
    fullName: CatLibrary.Complex
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: J
    fullName: J
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: CatLibrary.Complex`2
    name: Complex
    fullName: CatLibrary.Complex
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: J
    fullName: J
  - name: )
    fullName: )
- uid: System.Tuple`2
  parent: System
  isExternal: true
  name: Tuple<T1, T2>
  fullName: System.Tuple<T1, T2>
  fullname.vb: System.Tuple(Of T1, T2)
  name.vb: Tuple(Of T1, T2)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: )
    fullName: )
